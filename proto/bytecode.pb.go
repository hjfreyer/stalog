// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/bytecode.proto

/*
Package bytecode is a generated protocol buffer package.

It is generated from these files:
	proto/bytecode.proto

It has these top-level messages:
	Operation
	Push
	Permute
	Group
	Ungroup
	Commit
	Recall
*/
package bytecode

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Operation struct {
	// Types that are valid to be assigned to Op:
	//	*Operation_Push
	//	*Operation_Permute
	//	*Operation_Commit
	//	*Operation_Recall
	Op isOperation_Op `protobuf_oneof:"op"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isOperation_Op interface {
	isOperation_Op()
}

type Operation_Push struct {
	Push *Push `protobuf:"bytes,1,opt,name=push,oneof"`
}
type Operation_Permute struct {
	Permute *Permute `protobuf:"bytes,2,opt,name=permute,oneof"`
}
type Operation_Commit struct {
	Commit *Commit `protobuf:"bytes,3,opt,name=commit,oneof"`
}
type Operation_Recall struct {
	Recall *Recall `protobuf:"bytes,4,opt,name=recall,oneof"`
}

func (*Operation_Push) isOperation_Op()    {}
func (*Operation_Permute) isOperation_Op() {}
func (*Operation_Commit) isOperation_Op()  {}
func (*Operation_Recall) isOperation_Op()  {}

func (m *Operation) GetOp() isOperation_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *Operation) GetPush() *Push {
	if x, ok := m.GetOp().(*Operation_Push); ok {
		return x.Push
	}
	return nil
}

func (m *Operation) GetPermute() *Permute {
	if x, ok := m.GetOp().(*Operation_Permute); ok {
		return x.Permute
	}
	return nil
}

func (m *Operation) GetCommit() *Commit {
	if x, ok := m.GetOp().(*Operation_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *Operation) GetRecall() *Recall {
	if x, ok := m.GetOp().(*Operation_Recall); ok {
		return x.Recall
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Operation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Operation_OneofMarshaler, _Operation_OneofUnmarshaler, _Operation_OneofSizer, []interface{}{
		(*Operation_Push)(nil),
		(*Operation_Permute)(nil),
		(*Operation_Commit)(nil),
		(*Operation_Recall)(nil),
	}
}

func _Operation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Operation)
	// op
	switch x := m.Op.(type) {
	case *Operation_Push:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Push); err != nil {
			return err
		}
	case *Operation_Permute:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Permute); err != nil {
			return err
		}
	case *Operation_Commit:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *Operation_Recall:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Recall); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Operation.Op has unexpected type %T", x)
	}
	return nil
}

func _Operation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Operation)
	switch tag {
	case 1: // op.push
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Push)
		err := b.DecodeMessage(msg)
		m.Op = &Operation_Push{msg}
		return true, err
	case 2: // op.permute
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Permute)
		err := b.DecodeMessage(msg)
		m.Op = &Operation_Permute{msg}
		return true, err
	case 3: // op.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Commit)
		err := b.DecodeMessage(msg)
		m.Op = &Operation_Commit{msg}
		return true, err
	case 4: // op.recall
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Recall)
		err := b.DecodeMessage(msg)
		m.Op = &Operation_Recall{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Operation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Operation)
	// op
	switch x := m.Op.(type) {
	case *Operation_Push:
		s := proto.Size(x.Push)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_Permute:
		s := proto.Size(x.Permute)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_Commit:
		s := proto.Size(x.Commit)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_Recall:
		s := proto.Size(x.Recall)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Push struct {
	SymbolIdx int32 `protobuf:"varint,1,opt,name=symbolIdx" json:"symbolIdx,omitempty"`
}

func (m *Push) Reset()                    { *m = Push{} }
func (m *Push) String() string            { return proto.CompactTextString(m) }
func (*Push) ProtoMessage()               {}
func (*Push) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Push) GetSymbolIdx() int32 {
	if m != nil {
		return m.SymbolIdx
	}
	return 0
}

type Permute struct {
	Pop  int32   `protobuf:"varint,1,opt,name=pop" json:"pop,omitempty"`
	Push []int32 `protobuf:"varint,2,rep,packed,name=push" json:"push,omitempty"`
}

func (m *Permute) Reset()                    { *m = Permute{} }
func (m *Permute) String() string            { return proto.CompactTextString(m) }
func (*Permute) ProtoMessage()               {}
func (*Permute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Permute) GetPop() int32 {
	if m != nil {
		return m.Pop
	}
	return 0
}

func (m *Permute) GetPush() []int32 {
	if m != nil {
		return m.Push
	}
	return nil
}

type Group struct {
	Count int32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Group) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Ungroup struct {
	Count int32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *Ungroup) Reset()                    { *m = Ungroup{} }
func (m *Ungroup) String() string            { return proto.CompactTextString(m) }
func (*Ungroup) ProtoMessage()               {}
func (*Ungroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Ungroup) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Commit struct {
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Recall struct {
	Index int32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
}

func (m *Recall) Reset()                    { *m = Recall{} }
func (m *Recall) String() string            { return proto.CompactTextString(m) }
func (*Recall) ProtoMessage()               {}
func (*Recall) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Recall) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*Operation)(nil), "bytecode.Operation")
	proto.RegisterType((*Push)(nil), "bytecode.Push")
	proto.RegisterType((*Permute)(nil), "bytecode.Permute")
	proto.RegisterType((*Group)(nil), "bytecode.Group")
	proto.RegisterType((*Ungroup)(nil), "bytecode.Ungroup")
	proto.RegisterType((*Commit)(nil), "bytecode.Commit")
	proto.RegisterType((*Recall)(nil), "bytecode.Recall")
}

func init() { proto.RegisterFile("proto/bytecode.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd1, 0xcb, 0x4a, 0xc3, 0x40,
	0x14, 0x06, 0xe0, 0xdc, 0xd3, 0x1e, 0x41, 0xea, 0xd0, 0x45, 0x16, 0x5e, 0xca, 0xd0, 0x45, 0x11,
	0x6c, 0x41, 0xdf, 0x40, 0x17, 0xc6, 0x95, 0x32, 0xe0, 0x03, 0x34, 0xc9, 0x60, 0x03, 0x49, 0xce,
	0x30, 0x99, 0x01, 0xfb, 0x72, 0x3e, 0x9b, 0xcc, 0x25, 0x56, 0x5c, 0xb8, 0xcb, 0x7f, 0xe6, 0x3b,
	0xf0, 0x1f, 0x02, 0x4b, 0x21, 0x51, 0xe1, 0xae, 0x3a, 0x2a, 0x5e, 0x63, 0xc3, 0xb7, 0x36, 0x92,
	0xd9, 0x94, 0xe9, 0x57, 0x08, 0xf3, 0x57, 0xc1, 0xe5, 0x5e, 0xb5, 0x38, 0x90, 0x35, 0x24, 0x42,
	0x8f, 0x87, 0x22, 0x5c, 0x85, 0x9b, 0xb3, 0xfb, 0xf3, 0xed, 0xcf, 0xda, 0x9b, 0x1e, 0x0f, 0x65,
	0xc0, 0xec, 0x2b, 0xb9, 0x83, 0x5c, 0x70, 0xd9, 0x6b, 0xc5, 0x8b, 0xc8, 0xc2, 0x8b, 0x5f, 0xd0,
	0x3d, 0x94, 0x01, 0x9b, 0x0c, 0xb9, 0x85, 0xac, 0xc6, 0xbe, 0x6f, 0x55, 0x11, 0x5b, 0xbd, 0x38,
	0xe9, 0x27, 0x3b, 0x2f, 0x03, 0xe6, 0x85, 0xb1, 0x92, 0xd7, 0xfb, 0xae, 0x2b, 0x92, 0xbf, 0x96,
	0xd9, 0xb9, 0xb1, 0x4e, 0x3c, 0x26, 0x10, 0xa1, 0xa0, 0x6b, 0x48, 0x4c, 0x39, 0x72, 0x09, 0xf3,
	0xf1, 0xd8, 0x57, 0xd8, 0xbd, 0x34, 0x9f, 0xb6, 0x7f, 0xca, 0x4e, 0x03, 0xba, 0x83, 0xdc, 0x37,
	0x23, 0x0b, 0x88, 0x05, 0x0a, 0x4f, 0xcc, 0x27, 0x21, 0xfe, 0xea, 0x68, 0x15, 0x6f, 0x52, 0x77,
	0x23, 0xbd, 0x82, 0xf4, 0x59, 0xa2, 0x16, 0x64, 0x09, 0x69, 0x8d, 0x7a, 0x50, 0x7e, 0xc1, 0x05,
	0x7a, 0x03, 0xf9, 0xfb, 0xf0, 0xf1, 0x0f, 0x98, 0x41, 0xe6, 0x8e, 0xa3, 0xd7, 0x90, 0xb9, 0xea,
	0x46, 0xb6, 0x43, 0xc3, 0xa7, 0x7a, 0x2e, 0x54, 0x99, 0xfd, 0x25, 0x0f, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x0f, 0x7e, 0x02, 0xc7, 0xaa, 0x01, 0x00, 0x00,
}
